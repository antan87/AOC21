@page "/day3"

@using AOC21.Shared.Algebra.Interface
@using AOC21.Shared.Algebra.Models
@using AOC21.Shared.Parse
@using AOC21.Shared.Parse.Interface

@inject IJSRuntime JsRuntime;

<h2><a href="https://adventofcode.com/2021/day/3" target="_blank">Day 3</a></h2>
<br />

<EditForm Model=fileContent>
  <InputTextArea @bind-Value=fileContent style="width:480px; height:400px; font-size:24px;">
  </InputTextArea>
  <br />
  <button @onclick=OnOpenFile>Open File</button>
</EditForm>

<br />
<h3>Part 1</h3>
<h3>Result is: @resultPart1</h3>

<br />
<h3>Part 2</h3>
<h3>Result is: @resultPart2</h3>

@code {
    string fileContent = string.Empty;
    string binaryResultIverse = string.Empty;
    string binaryResult = string.Empty;
    int resultPart1;
    int resultPart2;

    private async Task OnOpenFile()
    {
        this.fileContent = await JsRuntime.InvokeAsync<string>("openFile");
        var inputRows = ParseHelper.Parse<string>(new string[] { Environment.NewLine },
        ParserCreator.StringParser, this.fileContent);
        if (!inputRows.Any())
            return;

        this.Part1(inputRows);
        this.Part2(inputRows);
    }
    private void Part1(string[] inputValues)
    {
        var binaryValues = ParseHelper.GetInput(inputValues, new BinaryParser()).ToList();
        var binaryResult = GetFrequency(binaryValues);

        var result = Convert.ToInt32(string.Join(string.Empty, binaryResult.Select(item => item.binary.GetValue().ToString())),
        2)
        * Convert.ToInt32(string.Join(string.Empty, binaryResult.Select(item => item.binary.GetInverseValue().ToString())), 2);

        this.resultPart1 = result;
    }

    private void Part2(string[] inputValues)
    {
    var binaryValues = ParseHelper.GetInput(inputValues, new BinaryParser()).ToList();
    List<int> firstBinaries = new List<int>();
    List<int> secondBinaries = new List<int>();

    Recursive(binaryValues.OrderByDescending(item => item.GetValue()).ToList(), 0, firstBinaries, true);
    Recursive(binaryValues.OrderBy(item => item.GetValue()).ToList(), 0, secondBinaries, false);

    var result = Convert.ToInt32(string.Join(string.Empty, firstBinaries.Select(item => item.ToString())),
    2)
    * Convert.ToInt32(string.Join(string.Empty, secondBinaries.Select(item => item.ToString())), 2);

    this.resultPart2 = result;

    static void Recursive(IEnumerable<IBinaryValue> values, int x, List<int> results, bool desc)
    {
      if (!values.Any(item => item.Point.X == x))
        return;

      if (values.Count() == 1)
      {
        results.Add(values.First().GetValue());
        return;
      }

      var (count, binaries) = GetFrequenciesForX(values, x, desc);
      results.Add(binaries.First().GetValue());

      Recursive(values.Where(item => binaries.Any(binary => binary.Point.Y == item.Point.Y)), ++x, results, desc);
    }
  }

  private static IEnumerable<(int count, IBinaryValue binary)> GetFrequency(IEnumerable<IBinaryValue> binaryValues, bool
  desc =
  true)
  {
    var maxX = binaryValues.Max(vector => vector.Point.X);
    for (int x = 0; x <= maxX; x++)
    {
      yield return GetFrequencyForX(binaryValues, x, desc);
    }
  }

  private static (int count, IBinaryValue binary) GetFrequencyForX(IEnumerable<IBinaryValue> binaryValues, int x, bool
  desc)
  {
    var temp = binaryValues
    .Where(item => item.Point.X == x)
    .GroupBy(x => x.GetValue());

    IEnumerable<IGrouping<int, IBinaryValue>>? group = null;
    if (desc)
      group = temp.OrderByDescending(item => item.Count());
    else
      group = temp.OrderBy(item => item.Count());

    return (group.First().Count(), group.First().First());
  }

  private static (int count, IEnumerable<IBinaryValue> binaries) GetFrequenciesForX(IEnumerable<IBinaryValue> binaryValues, int x, bool
  desc)
  {
    var temp = binaryValues
    .Where(item => item.Point.X == x)
    .GroupBy(x => x.GetValue());

    IEnumerable<IGrouping<int, IBinaryValue>>? group = null;
    if (desc)
      group = temp.OrderByDescending(item => item.Count());
    else
      group = temp.OrderBy(item => item.Count());

    return (group.First().Count(), group.First());
  }

  private class BinaryParser : IParser2D<IBinaryValue>
  {
    public IBinaryValue[] Parse(int y, string value) =>
    value.Select((charachter, x) => GetVector(charachter, new Point2D(x, y))).ToArray();

    private IBinaryValue GetVector(char charachter, IPoint point)
    {
      switch (charachter)
      {
        case '1':
          return new BinaryOne(point);

        case '0':
          return new BinaryZero(point);

        default:
          throw new ArgumentException($"Missing character implementation charachter {charachter}");
      }
    }
  }

  private record BinaryOne(IPoint Point) : IBinaryValue
  {
    int IBinaryValue.GetInverseValue() => 0;

    int IBinaryValue.GetValue() => 1;
  }

  private record BinaryZero(IPoint Point) : IBinaryValue
  {
    int IBinaryValue.GetInverseValue() => 1;

    int IBinaryValue.GetValue() => 0;
  }

  private interface IBinaryValue : IVector
  {
    int GetValue();
    int GetInverseValue();
  }
}
